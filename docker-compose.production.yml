version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-norte_gestion_prod}
      POSTGRES_USER: ${POSTGRES_USER:-norte_gestion}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Environment variables for init script
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-norte_gestion} -d ${POSTGRES_DB:-norte_gestion_prod}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - norte_network
    # NO external port exposure - internal access only

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=motocenter.settings.production
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=False
      - POSTGRES_DB=${POSTGRES_DB:-norte_gestion_prod}
      - POSTGRES_USER=${POSTGRES_USER:-norte_gestion}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      # Internal hostname for ALLOWED_HOSTS
      - INTERNAL_HOST=backend
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    command: >
      sh -c "echo '[START] Starting Django application...' &&
             echo '[CHECK] Checking database connection...' &&
             python manage.py check --database default &&
             echo '[MIGRATE] Running migrations...' &&
             python manage.py migrate --noinput &&
             echo '[SKIP] Skipping collectstatic - served directly by nginx' &&
             echo '[SERVER] Starting Gunicorn server...' &&
             gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 120 --log-level info --access-logfile - --error-logfile - nortegestion.wsgi:application"
    networks:
      - norte_network
    # NO external port exposure - internal access only

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=/api
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - norte_network
    # NO external port exposure - proxied through nginx

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      # HTTPS disabled for initial deployment
      # - "443:443"
    volumes:
      - ./nginx/production-hybrid.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      # SSL disabled for initial deployment
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - norte_network
    # ONLY external access point

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  norte_network:
    driver: bridge